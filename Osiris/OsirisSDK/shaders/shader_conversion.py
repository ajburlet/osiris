import argparse
from os import listdir
from os.path import isfile, join


class ShaderCodeConverter:
    def __init__(self):
        parser = argparse.ArgumentParser(description='Shader code converter')
        parser.add_argument('-d', '--dir', action='store', dest='dir', required=True,
                            help='Shader directory')
        parser.add_argument('-o', '--output', action='store', dest='output', required=True,
                            help='Output file')
        self.args = parser.parse_args()
        self.shaders = []

    def processGLSL(self, aFilename: str, aOutputFile):
        split = aFilename.split('.')
        shaderName = split[0]
        shaderType = split[1]
        shaderID = "glsl_" + shaderName + "_" + shaderType
        src = ""
        with open(join(self.args.dir, aFilename)) as file:
            src = file.read()
        aOutputFile.write("constexpr char {0}[] = R\"(\n{1}\n)\";\n\n".format(shaderID, src))
        self.shaders.append(["OpenGL", shaderType.capitalize(), shaderName[1:], shaderID])

    def writeShaderTable(self, aOutputFile):
        aOutputFile.write("void createShaderTable(OShaderTable& aShaderTable)\n")
        aOutputFile.write("{\n")
        for val in self.shaders:
            aOutputFile.write("\taShaderTable[{{OGraphicsEngine::Type::{},OShaderObject::Type::{},ORenderable::Type::{}}}] = {};\n".format(
                val[0], val[1], val[2], val[3]
            ))
        aOutputFile.write("}\n\n")

    def run(self):
        with open(self.args.output, "w") as file:
            file.write("// ********************************************************************************\n")
            file.write("// This file was generated by shader_conversion.py.\n")
            file.write("// ********************************************************************************\n")
            file.write("\n")
            file.write("#include \"OShaderID.h\"\n")
            file.write("\n")
            for dentry in listdir(self.args.dir):
                if not isfile(join(self.args.dir, dentry)):
                    continue
                if dentry.endswith(".glsl"):
                    self.processGLSL(dentry, file)
            self.writeShaderTable(file)


if __name__ == '__main__':
    ShaderCodeConverter().run()