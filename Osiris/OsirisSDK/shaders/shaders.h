// ********************************************************************************
// This file was generated by shader_conversion.py.
// ********************************************************************************

#include "OShaderID.h"

constexpr char glsl_OMesh_fragment[] = R"(
#version 330

smooth in vec4 smoothColor;

out vec4 outputColor;

void main()
{
	outputColor = smoothColor;
}


)";

constexpr char glsl_OMesh_vertex[] = R"(
#version 330

layout (location = 0) in vec4 position;
layout (location = 1) in vec4 color;

smooth out vec4 smoothColor;

uniform mat4 transformMtx;

void main()
{
	gl_Position = transformMtx * position;
	smoothColor = color;
}


)";

constexpr char glsl_OText2D_fragment[] = R"(
#version 330 

varying vec2 texcoord;
out vec4 outColor;

uniform sampler2D tex;
uniform vec4 color;

void main(void) 
{
	outColor = vec4(1, 1, 1, texture2D(tex, texcoord).r) * color;
}
)";

constexpr char glsl_OText2D_vertex[] = R"(
#version 330 

layout (location = 0) in vec4 position;
varying vec2 texcoord;
uniform vec3 posOffset;
uniform vec3 scale;

void main(void) 
{
	gl_Position = vec4(position.xy * scale.xy + posOffset.xy, 0.0f, 1.0f);
	texcoord = position.zw;
}
)";

void createShaderTable(OShaderTable& aShaderTable)
{
	aShaderTable[{OGraphicsEngine::Type::OpenGL,OShaderObject::Type::Fragment,ORenderable::Type::Mesh}] = glsl_OMesh_fragment;
	aShaderTable[{OGraphicsEngine::Type::OpenGL,OShaderObject::Type::Vertex,ORenderable::Type::Mesh}] = glsl_OMesh_vertex;
	aShaderTable[{OGraphicsEngine::Type::OpenGL,OShaderObject::Type::Fragment,ORenderable::Type::Text2D}] = glsl_OText2D_fragment;
	aShaderTable[{OGraphicsEngine::Type::OpenGL,OShaderObject::Type::Vertex,ORenderable::Type::Text2D}] = glsl_OText2D_vertex;
}

